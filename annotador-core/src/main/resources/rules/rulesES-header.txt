# DATES ENGLISH
# Example to add "DATEPRP" as ner tag, and ISO code as the normalized tag for strings matching a color

# Case insensitive pattern matching (see java.util.regex.Pattern flags)

# Map variable names to annotation keys
 myNER = { type: "CLASS", value: "oeg.tagger.core.time.annotation.myNER$MyNamedEntityTagAnnotation" }
 myNUM = { type: "CLASS", value: "oeg.tagger.core.time.annotation.myNER$MyNumTagAnnotation" }
 myNERnormalized = { type: "CLASS", value: "oeg.tagger.core.time.annotation.myNER$MyNormalizedNamedEntityTagAnnotation" }
 myT = { type: "CLASS", value: "oeg.tagger.core.time.annotation.myNER$MyNamedEntityTagAnnotation" }
# myTnormalized = { type: "CLASS", value: "oeg.tagger.core.time.annotation.myNER$MyNormalizedNamedEntityTagAnnotation" }
 myTType = { type: "CLASS", value: "oeg.tagger.core.time.annotation.temporal$MyTypeTemporalAnnotation" }
 
#myTValue = { type: "CLASS", value: "oeg.tagger.core.time.annotation.temporal$MyValueAnnotation" }

mySTValue = { type: "CLASS", value: "oeg.tagger.core.time.annotation.temporal$MyStringValueAnnotation" }

myRule = { type: "CLASS", value: "oeg.tagger.core.time.annotation.temporal$MyRuleAnnotation" }

 timexType = { type: "CLASS", value: "oeg.tagger.core.time.annotation.timex$Type" }
 timexValue = { type: "CLASS", value: "oeg.tagger.core.time.annotation.timex$Value" }
 timexFreq = { type: "CLASS", value: "oeg.tagger.core.time.annotation.timex$Freq" }
 timexQuant = { type: "CLASS", value: "oeg.tagger.core.time.annotation.timex$Quant" }
 



ner = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$NamedEntityTagAnnotation" }
normalized = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$NormalizedNamedEntityTagAnnotation" }
tokens = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation" }


# DATE

myDateDay = { type: "CLASS", value: "oeg.tagger.core.time.annotation.date$MyDay" }

myDateMonth = { type: "CLASS", value: "oeg.tagger.core.time.annotation.date$MyMonth" }

myDateYear = { type: "CLASS", value: "oeg.tagger.core.time.annotation.date$MyYear" }

myDateDayWeek = { type: "CLASS", value: "oeg.tagger.core.time.annotation.date$MyDayWeek" }

myDateWeek = { type: "CLASS", value: "oeg.tagger.core.time.annotation.date$MyWeek" }


# Duration

myDurationWeek = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyWeeks" }

myDurationHour = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyHours" }

myDurationDay = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyDays" }

myDurationMinute = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyMinutes" }

myDurationSecond = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MySeconds" }

myDurationMonth = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyMonths" }

myDurationYear = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyYears" }

myDurationDecade = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyDecades" }

myDurationDayWeek = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyDayWeeks" }

myDurationWeekend = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyWeekends" }

Period = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$Period" }




mytokens = { type: "CLASS", value: "oeg.tagger.core.time.annotation.temporal$MyTokensAnnotation" } 	 	

#ENV.defaultResultAnnotationKey = ( type, value ) 
ENV.defaultNestedResultsAnnotationKey = mytokens 
#ENV.defaults["stage.limitIters"] = 0

ENV.defaultResultAnnotationKey = (timexType, timexValue, timexFreq, timexQuant, myRule)
ENV.defaults["stage"] = 1

# Create OR pattern of
#  regular expression over temporal expressions
$MONTHS = (
  [{lemma:/[E|e]nero/}]     => 01 |
  [{lemma:/[F|f]ebrero/}]   => 02 |
  [{lemma:/[M|m]arzo/}]    => 03 |
  [{lemma:/[A|a]bril/} & !{ pos:/PROPN.*/ }]   => 04 | #TODO: Check this...
  [{lemma:/[M|m]ayo/}]   => 05 |
  [{lemma:/[J|j]unio/}]    => 06 |
  [{lemma:/[J|j]ulio/} & !{ pos:/PROPN.*/ }]    => 07 | #TODO: Check this...
  [{lemma:/[A|a]gosto/}]    => 08 |
  [{lemma:/[S|s]eptiembre/}]    => 09 |
  [{lemma:/[O|o]ctubre/}]    => 10 |
  [{lemma:/[N|n]oviembre/}]    => 11 |
  [{lemma:/[D|d]iciembre/}]    => 12
)

$WEEKL = (
  [{lemma:/[L|l]unes/}]     => 01 |
  [{lemma:/[M|m]artes/}]   => 02 |
  [{lemma:/[M|m]iércoles/}]    => 03 |
  [{lemma:/[J|j]ueves/}]     => 04 |
  [{lemma:/[V|v]iernes/}]   => 05 |
  [{lemma:/[S|s]ábado/}]    => 06 |
  [{lemma:/[D|d]omingo/} & !{ pos:/PROPN.*/ }]    => 07
) 

$DAYMONTHN = (
  /01|1/ => 01 |
  /02|2/   => 02 |
  /03|3/    => 03 |
  /04|4/     => 04 |
  /05|5/   => 05 |
  /06|6/    => 06 |  
  /07|7/    => 07 |
  /08|8/     => 08 |
  /09|9/   => 09 |
  /10/   => 10 |
  /11/   => 11 |
  /12/   => 12 |
  /13/   => 13 |
  /14/   => 14 |
  /15/   => 15 |
  /16/   => 16 |
  /17/   => 17 |
  /18/   => 18 |
  /19/   => 19 |
  /20/   => 20 |
  /20/   => 20 |
  /21/   => 21 |
  /22/   => 22 |
  /23/   => 23 |
  /24/   => 24 |
  /25/   => 25 |
  /26/   => 26 |
  /27/   => 27 |
  /28/   => 28 |
  /29/   => 29 |
  /30/   => 30 |
  /31/   => 31
)

$MONTHN = (
  /01|1/ => 01 |
  /02|2/   => 02 |
  /03|3/    => 03 |
  /04|4/     => 04 |
  /05|5/   => 05 |
  /06|6/    => 06 |  
  /07|7/    => 07 |
  /08|8/     => 08 |
  /09|9/   => 09 |
  /10/   => 10 |
  /11/   => 11 |
  /12/   => 12
)

$ORDINALS = (
  [{lemma:/primer|primera/}] => 01 |
  [{lemma:/segundo|segunda/}]   => 02 |
  [{lemma:/tercer|tercera/}]    => 03 |
  [{lemma:/cuarto|cuarta/}]     => 04 |
  [{lemma:/quinto|quinta/}]   => 05 |
  [{lemma:/sexto|sexta/}]    => 06 |  
  [{lemma:/séptimo|séptima/}]    => 07 |
  [{lemma:/octavo|octava/}]     => 08 |
  [{lemma:/noveno|novena/}]   => 09 |
  [{lemma:/décima|décimo/}]   => 10 |
  [{lemma:/decimoprimer|decimoprimera/}]   => 11 |
  [{lemma:/decimosegundo|decimosegunda/}]   => 12 |
  [{lemma:/decimotercer|decimotercera/}]   => 13 |
  [{lemma:/decimocuarto|decimocuarta/}]   => 14 |
  [{lemma:/decimoquinto|decimoquinta/}]   => 15 |
  [{lemma:/decimosexto|decimosexta/}]    => 16 |  
  [{lemma:/decimoséptimo|decimoséptima/}]    => 17 |
  [{lemma:/decimooctavo|decimooctava/}]     => 18 |
  [{lemma:/decimonoveno|decimonovena/}]   => 19 |
  [{lemma:/vigésimo|vigésima/}]   => 20 |
  [{lemma:/vigesimoprimer|vigesimoprimera/}] => 21 |
  [{lemma:/vigesimosegundo|vigesimosegunda/}]   => 22 |
  [{lemma:/vigesimotercer|vigesimotercera/}]    => 23 |
  [{lemma:/vigesimocuarto|vigesimocuarta/}]     => 24 |
  [{lemma:/vigesimoquinto|vigesimoquinta/}]   => 25 |
  [{lemma:/vigesimosexto|vigesimosexta/}]    => 26 |  
  [{lemma:/vigesimoséptimo|vigesimoséptima/}]    => 27 |
  [{lemma:/vigesimoctavo|vigesimoctava/}]     => 28 |
  [{lemma:/vigesimonoveno|vigesimonovena/}]   => 29 |
  [{lemma:/trigésimo|trigésima/}]   => 30 |
  [{lemma:/trigesimoprimer|trigesimoprimera/}]   => 31
)

DGRANULARITY_MAP = {
  "día" : "DAY",
  "días" : "DAY",
  "finsemana"   : "WEEKEND",
  "semana"    : "WEEK",
  "semanas"    : "WEEK",
  "quincena"     : "FORNIGHT",
  "quincenas"     : "FORNIGHT",
  "mes"   : "MONTH",
  "meses"   : "MONTH",
  "bimestre"    : "2_MONTH",  
  "bimestres"    : "2_MONTH",  
  "trimestre"    : "3_MONTH",
  "trimestres"    : "3_MONTH",
  "cuatrimestre"     : "4_MONTH",
  "cuatrimestres"     : "4_MONTH",
  "semestre"   : "6_MONTH",
  "semestres"   : "6_MONTH",
  "año"   : "YEAR",
  "lustro"   : "5_YEAR",
  "lustros"   : "5_YEAR",
  "decada"   : "10_YEAR",
  "decadas"   : "10_YEAR",
  "siglo"   : "100_YEAR",
  "siglos"   : "100_YEAR",
  "milenio"   : "1000_YEAR",
  "milenios"   : "1000_YEAR"
}
$DGranularity = CreateRegex(Keys(DGRANULARITY_MAP))



DURATION_MAP = {
  "DAY" : "myDurationDay" ,
  "WEEKEND"   : "myDurationWeekend" ,
  "WEEK"    : "myDurationWeek" ,
  "FORNIGHT"     : "myDurationWeek" ,
  "MONTH"   : "myDurationMonth" ,
  "2_MONTH"    : "myDurationMonth" ,  
  "3_MONTH"    : "myDurationMonth" ,
  "4_MONTH"     : "myDurationMonth" ,
  "6_MONTH"   : "myDurationMonth" ,
  "YEAR"   : "myDurationYear" ,
  "5_YEAR"   : "myDurationYear" ,
  "10_YEAR"   : "myDurationYear" ,
  "100_YEAR"   : "myDurationDecade" ,
  "1000_YEAR"   : "myDurationYear",
  "HOUR"	: "myDurationHour",
  "MINUTE"	: "myDurationMinute",
  "SECOND"	: "myDurationSecond"
}

HALF_DURATION_MAP = {
  "DAY" : "12H" ,
  "WEEKEND"   : "01D" ,
  "WEEK"    : "03D12H" ,
  "FORNIGHT"     : "01W" ,
  "MONTH"   : "02W" ,
  "YEAR"   : "06M" ,
  "5_YEAR"   : "02Y06M" ,
  "10_YEAR"   : "05Y" ,
  "100_YEAR"   : "50Y" ,
  "1000_YEAR"   : "500Y",
  "HOUR"	: "30M",
  "MINUTE"	: "30S",
  "SECOND"	: ""
}

QUARTER_DURATION_MAP = {
  "DAY" : "06H" ,
  "WEEKEND"   : "12H" ,
  "WEEK"    : "01D18H" ,
  "FORNIGHT"     : "03D12H" ,
  "MONTH"   : "01W" ,
  "YEAR"   : "03M" ,
  "5_YEAR"   : "01Y06H" ,
  "10_YEAR"   : "02Y06M" ,
  "100_YEAR"   : "25Y" ,
  "1000_YEAR"   : "250Y",
  "HOUR"	: "15M",
  "MINUTE"	: "15S",
  "SECOND"	: ""
}

TQUARTER_DURATION_MAP = {
  "DAY" : "18H" ,
  "WEEKEND"   : "1D12H" ,
  "WEEK"    : "04D06H" ,
  "FORNIGHT"     : "01W03D12H" ,
  "MONTH"   : "01W" ,
  "YEAR"   : "03M" ,
  "5_YEAR"   : "01Y06H" ,
  "10_YEAR"   : "07Y06M" ,
  "100_YEAR"   : "75Y" ,
  "1000_YEAR"   : "750Y",
  "HOUR"	: "45M",
  "MINUTE"	: "45S",
  "SECOND"	: ""
}

PERIODMENTE_MAP = {
  "diariamente" : "P1D",
  "semanalmente" : "P1W",
  "mensualmente"   : "P1M",
  "bimensualmente"    : "P2M",
  "trimestralmente"    : "P3M",
  "semestralmente"     : "P6M",
  "anualmente"     : "P1Y",
  "bianualmente"     : "P2Y",
  "diario" : "P1D",
  "semanal" : "P1W",
  "mensual"   : "P1M",
  "bimensual"    : "P2M",
  "trimestral"    : "P3M",
  "semestral"     : "P6M",
  "anual"     : "P1Y",
  "bianual"     : "P2Y"
}
$PeriodAdv = CreateRegex(Keys(PERIODMENTE_MAP))

HOURS_MENOS_MAP = {
  "una": "12",
  "dos": "1",
  "tres": "2",
  "cuatro": "3",
  "cinco": "4",
  "seis": "5",
  "siete": "6",
  "ocho": "7",
  "nueve": "8",
  "diez": "9",
  "once": "10",
  "doce": "11",
  "1": "12",
  "2": "1",
  "3": "2",
  "4": "3",
  "5": "4",
  "6": "5",
  "7": "6",
  "8": "7",
  "9": "8",
  "10": "9",
  "11": "10",
  "12": "11"
}
$Hoursmenosmap = CreateRegex(Keys(HOURS_MENOS_MAP))


MINUTES_MENOS_MAP = {
  "uno": "59",
  "dos": "58",
  "tres": "57",
  "cuatro": "56",
  "cinco": "55",
  "seis": "54",
  "siete": "53",
  "ocho": "52",
  "nueve": "51",
  "diez": "50",
  "once": "49",
  "doce": "48",
  "trece": "47",
  "catorce": "46",
  "quince": "45",
  "dieciseis": "44",
  "diecisiete": "43",
  "dieciocho": "42",
  "diecinueve": "41",
  "veinte": "40",
  "veintiuno": "39",
  "veintidos": "38",
  "veintitres": "37",
  "veinticuatro": "36",
  "veinticinco": "35",
  "veintiseis": "34",
  "veintisiete": "33",
  "veintiocho": "32",
  "veintinueve": "31",
  "1": "59",
  "2": "58",
  "3": "57",
  "4": "56",
  "5": "55",
  "6": "54",
  "7": "53",
  "8": "52",
  "9": "51",
  "10": "50",
  "11": "49",
  "12": "48",
  "13": "47",
  "14": "46",
  "15": "45",
  "16": "44",
  "17": "43",
  "18": "42",
  "19": "41",
  "20": "40",
  "21": "39",
  "22": "38",
  "23": "37",
  "24": "36",
  "25": "35",
  "26": "34",
  "27": "33",
  "28": "32",
  "29": "31"
}
$Minutesmenosmap = CreateRegex(Keys(MINUTES_MENOS_MAP))


HOURS_MAP = {
  "una": "1",
  "dos": "2",
  "tres": "3",
  "cuatro": "4",
  "cinco": "5",
  "seis": "6",
  "siete": "7",
  "ocho": "8",
  "nueve": "9",
  "diez": "10",
  "once": "11",
  "doce": "12",
  "1": "1",
  "2": "2",
  "3": "3",
  "4": "4",
  "5": "5",
  "6": "6",
  "7": "7",
  "8": "8",
  "9": "9",
  "10": "10",
  "11": "11",
  "12": "12"
}
$Hoursmap = CreateRegex(Keys(HOURS_MAP))

PARTDAY_MAP = {
  "mañana" : "MO",
  "madrugada" : "MO",
  "mediodía" : "MI",
  "tarde"   : "AF",
  "tardenoche"    : "EV",
  "noche"    : "NI"
}
$PDGranularity = CreateRegex(Keys(PARTDAY_MAP))



DGRANULARITY_UNIT_MAP = {
  "DAY" : "D" ,
  "WEEKEND"   : "WEEKEND" ,
  "WEEK"    : "W" ,
  "FORNIGHT"     : "D" ,
  "MONTH"   : "M" ,
  "2_MONTH"    : "M" ,  
  "3_MONTH"    : "M" ,
  "4_MONTH"     : "M" ,
  "6_MONTH"   : "M" ,
  "YEAR"   : "Y" ,
  "5_YEAR"   : "Y" ,
  "10_YEAR"   : "Y" ,
  "100_YEAR"   : "Y" ,
  "1000_YEAR"   : "Y"
}

DGRANULARITY_AMOUNT_MAP = {
  "DAY" : 1 ,
  "WEEKEND"   : 2 ,
  "WEEK"    : 1 ,
  "FORNIGHT"     : 15 ,
  "MONTH"   : 1 ,
  "YEAR"   : 1 ,
  "2_MONTH"    : 2 ,  
  "3_MONTH"    : 3 ,
  "4_MONTH"     : 4 ,
  "6_MONTH"   : 6 ,
  "5_YEAR"   : 5 ,
  "10_YEAR"   : 10 ,
  "100_YEAR"   : 100  ,
  "1000_YEAR"   : 1000 
}



PERIOD_MAP = {
  "DAY" : "P" ,
  "WEEKEND"   : "P" ,
  "WEEK"    : "P" ,
  "FORNIGHT"     : "P" ,
  "MONTH"   : "P" ,
  "2_MONTH"    : "P" ,  
  "3_MONTH"    : "P" ,
  "4_MONTH"     : "P" ,
  "6_MONTH"   : "P" ,
  "YEAR"   : "P" ,
  "5_YEAR"   : "P" ,
  "10_YEAR"   : "P" ,
  "100_YEAR"   : "P" ,
  "1000_YEAR"   : "P",
  "SECOND"   : "PT",
  "MINUTE"   : "PT",
  "HOUR"   : "PT"
}

PMHOUR_MAP = {
  "1" : "13" ,
  "2"   : "14" ,
  "3"    : "15" ,
  "4"     : "16" ,
  "5"   : "17" ,
  "6"    : "18" ,  
  "7"    : "19" ,
  "8"     : "20" ,
  "9"   : "21" ,
  "10"   : "22" ,
  "11"   : "23" ,
  "12"   : "24" 
}


TGRANULARITY_MAP = {
  "segundo" : "SECOND",
  "segundos" : "SECOND",
  "minuto" : "MINUTE",
  "minutos" : "MINUTE",
  "hora"   : "HOUR",
  "horas"   : "HOUR"
}
$TGranularity = CreateRegex(Keys(TGRANULARITY_MAP))

TGRANULARITY_UNIT_MAP = {
  "SECOND" : "S",
  "MINUTE" : "M",
  "HOUR"   : "H"
}

TGRANULARITY_AMOUNT_MAP = {  
  "SECOND" : 1,
  "MINUTE" : 1,
  "HOUR"   : 1
}

$YEARN = ( /[12]\d\d\d/ );



YEARS_MAP = {
  "mil": 1000
}
$YEARDIG = CreateRegex(Keys(YEARS_MAP))

CENTS_MAP = {
  "ciento": 100,
  "doscientos": 200,
  "trescientos": 300,
  "cuatrocientos": 400,
  "quinientos": 500,
  "seiscientos": 600,
  "setecientos": 700,
  "ochocientos": 800,
  "novecientos": 900,
  "dosciento": 200,
  "tresciento": 300,
  "cuatrociento": 400,
  "quiniento": 500,
  "seisciento": 600,
  "seteciento": 700,
  "ochociento": 800,
  "noveciento": 900
}
$CENTDIG = CreateRegex(Keys(CENTS_MAP))

DECS_MAP = {
  "diez": 10,
  "veinte": 20,
  "treinta": 30,
  "cuarenta": 40,
  "cincuenta": 50,
  "sesenta": 60,
  "setenta": 70,
  "ochenta": 80,
  "noventa": 90
}
$DECSDIG = CreateRegex(Keys(DECS_MAP))

UNS_MAP = {
  "un": 1,
  "una": 1,
  "uno": 1,
  "dos": 2,
  "tres": 3,
  "cuatro": 4,
  "cinco": 5,
  "seis": 6,
  "siete": 7,
  "ocho": 8,
  "nueve": 9
}
$UNSDIG = CreateRegex(Keys(UNS_MAP))

SPECIALS_MAP = {
  "once": 11,
  "doce": 12,
  "trece": 13,
  "catorce": 14,
  "quince": 15,
  "dieciseis": 16,
  "diecisiete": 17,
  "dieciocho": 18,
  "diecinueve": 19,
  "veintiuno": 21,
  "veintidos": 22,
  "veintitres": 23,
  "veinticuatro": 24,
  "veinticinco": 25,
  "veintiseis": 26,
  "veintisiete": 27,
  "veintiocho": 28,
  "veintinueve": 29
}

$SPECIALSDIG = CreateRegex(Keys(SPECIALS_MAP))






$DEICTIC2 = (
  /próximo/ => "+1" |
  /siguiente/   => "+1" |
  /ultimo/    => "-1" |
  /anterior/     => "-1" |
  /previo/   => "-1" |
  /posterior/    => "+1"
)





# Define ruleType to be over tokens
ENV.defaults["ruleType"] = "tokens"